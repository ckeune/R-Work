{
    "contents" : "#World Bank Indicators demo\nrequire(WDI)\nrequire(rCharts)\n\ndevtools::install_github(\"rCharts\", \"ramnathv\")\n#----http://stackoverflow.com/a/19729235/454773\npluck_ = function (element){\n  function(x) x[[element]]\n}\n\n#' Zip two vectors\nzip_ <- function(..., names = F){\n  x = list(...)\n  y = lapply(seq_along(x[[1]]), function(i) lapply(x, pluck_(i)))\n  if (names) names(y) = seq_along(y)\n  return(y)\n}\n\n#' Sort a vector based on elements at a given position\nsort_ <- function(v, i = 1){\n  v[sort(sapply(v, '[[', i), index.return = T)$ix]\n}\n\nlibrary(plyr)\n\n#cat(rjson::toJSON(setNames(dat2, NULL)))\n\n#---end\n\n\n#---- https://code.google.com/p/google-motion-charts-with-r/source/browse/trunk/demo/WorldBank.R?r=286\ngetWorldBankCountries <- function(){\n  require(RJSONIO)\n  wbCountries <- fromJSON(\"http://api.worldbank.org/country?per_page=300&format=json\")\n  wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))\n  wbCountries$longitude <- as.numeric(wbCountries$longitude)\n  wbCountries$latitude <- as.numeric(wbCountries$latitude)\n  levels(wbCountries$region.value) <- gsub(\"\\\\(all income levels\\\\)\",\n                                           \"\", levels(wbCountries$region.value))\n  return(wbCountries)\n}\n#----\n\nparams=list(\n  start=1950,\n  end=2010,\n  x='Fertility',\n  y='GDP',\n  radius='Population',\n  color='Region',\n  key='Country',\n  yscale='log',\n  xscale='linear',\n  rmin=0,\n  xmin=0\n  \n)\n\ngetdata.motionchart=function(countries=c(\"BD\",'GB')){\n  \n  tmp=getWorldBankCountries()[,c('iso2Code','region.value')]\n  names(tmp)=c('iso2Code','Region')\n  \n  data <- WDI(indicator=c('SP.DYN.TFRT.IN','SP.POP.TOTL','NY.GDP.PCAP.CD'),start = params$start, end = params$end,country=countries)\n  names(data)=c('iso2Code','Country','Year','Fertility','Population','GDP')\n  \n  data=merge(data,tmp,by='iso2Code')\n  dlply(data, .(Country, Region), function(d){\n    list(\n      Country = d$Country[1],\n      Region = d$Region[1],\n      Fertility = sort_(zip_(d$Year, d$Fertility)),\n      GDP = sort_(zip_(d$Year, d$GDP)),\n      Population=sort_(zip_(d$Year, d$Population))\n    )\n  })\n}\n\n#dat2=getdata.motionchart()\ndat2=getdata.motionchart(c('GB','US','ES','BD'))\n#---\n\n\nparamsTidy=function(params){\n  if (!('ymin' %in% names(params))) params$ymin= signif(min(0.9*data[[params$y]]),3)\n  if (!('ymax' %in% names(params))) params$ymax= signif(max(1.1*data[[params$y]]),3)\n  if (!('xmin' %in% names(params))) params$xmin= signif(min(0.9*data[[params$x]]),3)\n  if (!('xmax' %in% names(params))) params$xmax= signif(max(1.1*data[[params$x]]),3)\n  if (!('rmin' %in% names(params))) params$rmin= signif(min(0.9*data[[params$radius]]),3)\n  if (!('rmax' %in% names(params))) params$rmax= signif(max(1.1*data[[params$radius]]),3)\n  params\n}\n\nparams=paramsTidy(params)\n\n#Suggestion to use the same motionchart interface as googleVis\n#gvisMotionChart\n#function (data, idvar = \"id\", timevar = \"time\", xvar = \"\", yvar = \"\", \n#          colorvar = \"\", sizevar = \"\", date.format = \"%Y/%m/%d\", options = list(), \n#          chartid) \nrChart.generator=function(data,params, h=400,w=800){\n  rChart <- rCharts$new()\n  rChart$setLib('../motionchart')\n  #rChart$setTemplate(script = \"../motionchart/layouts/motionchart_Demo.html\")\n  \n  rChart$set(\n    \n    countryHighlights='',\n    yearMin= params$start,\n    yearMax=params$end,\n    \n    x=params$x,\n    y=params$y,\n    radius=params$radius,\n    color=params$color,\n    key=params$key,\n    \n    ymin=params$ymin,\n    ymax=params$ymax,\n    xmin=params$xmin,\n    xmax=params$xmax,\n    rmin=params$rmin,\n    rmax=params$rmax,\n    \n    xlabel=params$x,\n    ylabel=params$y,\n    \n    yscale=params$yscale,\n    xscale=params$xscale,\n    \n    width=w,\n    height=h\n  )\n  \n  rChart$set( data= rjson::toJSON(setNames(data, NULL)) )\n  \n  rChart\n}\n\nrChart.generator(dat2,params,w=1000,h=600)",
    "created" : 1422916917997.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "3343846136",
    "id" : "7C45F1C6",
    "lastKnownWriteTime" : 12948304202498162,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled7"
    },
    "source_on_save" : false,
    "type" : "r_source"
}